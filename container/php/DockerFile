# container/php/Dockerfile

# ===================================================================
# 1. ベースイメージの指定
# ===================================================================
# Docker HubにあるPHPの公式イメージから、バージョン8.4のFPM版を選択します。
# FPM (FastCGI Process Manager) は、この後のステップで作成する
# Nginx(Webサーバー)とPHPを連携させるための、標準的な仕組みです。
FROM php:8.4-fpm


# ===================================================================
# 2. 必要なライブラリやツールのインストール
# ===================================================================
# PHP拡張機能をインストールするために必要なOSのライブラリや、
# git, zipなどの開発に便利なツールをコンテナ内にインストールします。
# `apt-get update`でパッケージリストを更新してからインストールするのが定石です。
# 最後に `apt-get clean` 等で不要なキャッシュを削除し、イメージサイズを小さく保ちます。
RUN apt-get update && apt-get install -y \
      git \
      zip \
      unzip \
      libzip-dev \
      libpng-dev \
      libonig-dev \
      libxml2-dev \
      mariadb-client \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*


# ===================================================================
# 3. PHP拡張機能のインストール
# ===================================================================
# `docker-php-ext-install`は、PHPコンテナに標準で用意されている便利なスクリプトです。
# これを使って、Laravelの動作に必須となる各種PHP拡張機能を有効にします。
# - pdo_mysql: MySQLデータベースに接続するために必要
# - mbstring: マルチバイト文字列（日本語など）を扱うために必要
# - exif: 画像ファイルのメタ情報を読み取るために必要
# - pcntl: プロセス制御を行うために必要(キューなどで利用)
# - bcmath: 高精度な計算を行うために必要
# - gd: 画像の生成や加工を行うために必要
# - zip: Zipファイルを扱うために必要
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip


# ===================================================================
# 4. Composerのインストール
# ===================================================================
# ComposerはPHPのパッケージ管理ツールで、Laravel本体のインストールや
# ライブラリの追加・管理に使います。
# 公式のComposerイメージから実行ファイル本体だけをコピーしてくるのが、
# 最も簡単で確実な方法です。
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer


# ===================================================================
# 5. 作業ディレクトリの設定
# ===================================================================
# `WORKDIR` を設定すると、以降のコマンドはこのディレクトリ内で実行されます。
# また、`docker compose exec` などでコンテナに接続した際の
# デフォルトの場所にもなります。Laravelプロジェクトのルートディレクトリを
# ここに配置するのが一般的です。
WORKDIR /var/www/html