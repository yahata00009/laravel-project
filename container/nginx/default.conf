# container/nginx/default.conf

server {
    # ===================================================================
    # 1. 待ち受けポート
    # ===================================================================
    # このNginxコンテナが、コンテナ内部の80番ポートでHTTPリクエストを
    # 待ち受けるように設定します。
    # (ホストPCのどのポートに繋ぐかは、後ほどdocker-compose.ymlで設定します)
    listen 80;

    # ===================================================================
    # 2. サーバー名
    # ===================================================================
    # このサーバー設定がどのドメイン名に対応するかを指定します。
    # 開発環境では `localhost` で問題ありません。
    server_name localhost;

    # ===================================================================
    # 3. ドキュメントルート
    # ===================================================================
    # Webに公開するファイルのルートディレクトリを指定します。
    # Laravelでは、セキュリティの観点から `public` ディレクトリのみを
    # 公開するのが鉄則です。
    root /var/www/html/public;

    # ===================================================================
    # 4. デフォルトファイル
    # ===================================================================
    # `/` などディレクトリ名でアクセスされた際に、最初に探すファイルを指定します。
    # Laravelは `index.php` がすべてのリクエストの入り口となるため、これを指定します。
    index index.php;

    # ===================================================================
    # 5. フロントコントローラー設定
    # ===================================================================
    # この設定がLaravelの綺麗なURL(ルーティング)を機能させるための鍵です。
    # リクエストされたURLに対応する物理的なファイルやディレクトリが存在しない場合、
    # すべてのリクエストを `index.php` に渡してLaravelに処理を任せます。
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # ===================================================================
    # 6. PHP-FPMへの連携設定 (最重要)
    # ===================================================================
    # `.php`で終わるURLへのリクエストを、PHP-FPM（PHPコンテナ）に転送するための設定です。
    location ~ \.php$ {
        # 'php:9000' の部分で、コンテナ間通信を行います。
        # 後ほどdocker-compose.ymlで定義する `php` という名前のコンテナ(サービス)の
        # 9000番ポートに処理を依頼します。
        fastcgi_pass   php:9000;
        
        # 実行するPHPスクリプトのフルパスをPHP-FPMに伝えます。
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # その他のFastCGIの標準的なパラメータを読み込みます。
        include        fastcgi_params;
    }

    # ===================================================================
    # 7. エラーログの抑制 (任意)
    # ===================================================================
    # ブラウザが自動的にリクエストするfavicon.icoなどが見つからない場合のエラーログを
    # 記録しないようにする設定です。これにより、ログファイルがすっきりします。
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }
}